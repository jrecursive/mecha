
// 
// register mecha.vm.bifs.* system verbs
// 

register namespace:$ module-class:mecha.vm.bifs.RiakClientModule verbs:(get:Get put:Put delete:Delete)

register namespace:$ module-class:mecha.vm.bifs.ChannelModule verbs:(subscribe:Subscribe unsubscribe:Unsubscribe publish:Publish)

register namespace:$ module-class:mecha.vm.bifs.ClientModule verbs:(client-sink:ClientSink channel-sink:ChannelSink start-all-sources:StartAllSources macro-sink:MacroSink)

register namespace:$ module-class:mecha.vm.bifs.SolrModule verbs:(solr-select:Select solr-select-iterator:SelectIterator value-count-reducer:ValueCountReducer)

register namespace:$ module-class:mecha.vm.bifs.MDBModule verbs:(materialize-pbk-stream:MaterializePBKStream stream-partition-bucket:StreamPartitionBucket partition-bucket-iterator:PartitionBucketIterator)

register namespace:$ module-class:mecha.vm.bifs.ETLModule verbs:(project:Project extract-riak-value:ExtractRiakValue)

register namespace:$ module-class:mecha.vm.bifs.ClusterModule verbs:(with-coverage:WithCoverage with-iterated-coverage:WithIteratedCoverage with-sorted-coverage:WithSortedCoverage warp:Warp)

register namespace:$ module-class:mecha.vm.bifs.StreamModule verbs:(vector-sequencer:VectorSequencer eat:Eat limit:Limit)

/////////////
// globals //
/////////////

//
// spatial-query
//

#define-global spatial-query
#if (!$args.filter) #set ($args.filter = "") #end
${root} = (with-coverage partition-marker:"<<${guid}-p>>" host-marker:"<<${guid}-h>>" bucket:${args.bucket} do:(warp host:<<${guid}-h>> do:(solr-select params:(q:"partition:<<${guid}-p>> AND bucket:${args.bucket} ${args.filter}" sfield:${args.field} pt:"${args.lat},${args.lon}" d:${args.radius} fq:"{!bbox}"))))
${root} -> ${sink}
#end spatial-query

//
// riak-materialize
//

#define-global riak-materialize
${root} = (materialize-pbk-stream)
${guid}-extractor = (extract-riak-value position:0)
${root} -> ${guid}-extractor
${guid}-extractor -> $sink
#end riak-materialize

//
// facet
//

#define-global facet
#if (!$args.filter) #set ($args.filter = "") #end
#if (!$args.mincount) #set ($args.mincount = "1") #end
#if (!$args.limit) #set ($args.limit = "100") #end
#if (!$args.start) #set ($args.start = "0") #end
${root} = (with-coverage partition-marker:"<<${guid}-p>>" host-marker:"<<${guid}-h>>" bucket:${args.bucket} do:(warp host:<<${guid}-h>> do:(solr-select params:(facet:true facet.limit:${args.limit} facet.field:${args.field} facet.mincount:${args.mincount} start:${args.start} rows:0 q:"partition:<<${guid}-p>> AND bucket:${args.bucket} ${args.filter}"))))
${guid}-reducer = (value-count-reducer)
${root} -> ${guid}-reducer
${guid}-reducer -> ${sink}
#end facet

